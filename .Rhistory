percomPlot <- function(true_params, palette_name = "Set1",...) {
args <- list(...)
# Capture the names of the arguments passed via ...
modelnames <- sapply(substitute(list(...))[-1], deparse)
vpcnames <- names(true_params)[grep("vpc", names(true_params))]
estvpcnames <- unique(unlist(lapply(args, function(df) {
grep("vpc", names(df), value = TRUE)})))
missing_vpcs <- setdiff(vpcnames, estvpcnames)
if(length(missing_vpcs) > 0) {
stop("The following vpc columns are not common: ",
paste(missing_vpcs, collapse = ", "))
}
nrows <- length(args)
ncols <- length(vpcnames)
par(mfrow = c(nrows, ncols))
colors <- RColorBrewer::brewer.pal(max(ncols, 3), palette_name)
print(palette)
# p <- lapply(seq_along(args), function(i) {
#   df <- args[[i]]
#   modelname <- modelnames[i]
#
#   for (j in seq_along(vpcnames)) {
#     vpc <- vpcnames[j]
#     true <- true_params[[vpc]]
#     bias <- true_params[[vpc]] - df[[vpc]]
#
#     plot(true, bias, ylim = c(-1, 1),
#          xlab = paste("True", vpc), ylab = paste("Bias ", vpc),
#          main = paste("Model:", modelname),
#          col = colors[j], pch = 19)
#   }
# })
}
percomPlot(true,nbnb,nbcp,nbvst)
percomPlot <- function(true_params, palette_name = "Set1",...) {
args <- list(...)
print(args)
# Capture the names of the arguments passed via ...
modelnames <- sapply(substitute(list(...))[-1], deparse)
vpcnames <- names(true_params)[grep("vpc", names(true_params))]
estvpcnames <- unique(unlist(lapply(args, function(df) {
grep("vpc", names(df), value = TRUE)})))
missing_vpcs <- setdiff(vpcnames, estvpcnames)
if(length(missing_vpcs) > 0) {
stop("The following vpc columns are not common: ",
paste(missing_vpcs, collapse = ", "))
}
nrows <- length(args)
ncols <- length(vpcnames)
par(mfrow = c(nrows, ncols))
colors <- RColorBrewer::brewer.pal(max(ncols, 3), palette_name)
print(palette)
# p <- lapply(seq_along(args), function(i) {
#   df <- args[[i]]
#   modelname <- modelnames[i]
#
#   for (j in seq_along(vpcnames)) {
#     vpc <- vpcnames[j]
#     true <- true_params[[vpc]]
#     bias <- true_params[[vpc]] - df[[vpc]]
#
#     plot(true, bias, ylim = c(-1, 1),
#          xlab = paste("True", vpc), ylab = paste("Bias ", vpc),
#          main = paste("Model:", modelname),
#          col = colors[j], pch = 19)
#   }
# })
}
percomPlot(true,nbnb,nbcp,nbvst)
percomPlot <- function(true_params, palette_name = "Set1",...) {
args <- list(...)
print(palette_name)
# Capture the names of the arguments passed via ...
modelnames <- sapply(substitute(list(...))[-1], deparse)
vpcnames <- names(true_params)[grep("vpc", names(true_params))]
estvpcnames <- unique(unlist(lapply(args, function(df) {
grep("vpc", names(df), value = TRUE)})))
missing_vpcs <- setdiff(vpcnames, estvpcnames)
if(length(missing_vpcs) > 0) {
stop("The following vpc columns are not common: ",
paste(missing_vpcs, collapse = ", "))
}
nrows <- length(args)
ncols <- length(vpcnames)
par(mfrow = c(nrows, ncols))
colors <- RColorBrewer::brewer.pal(max(ncols, 3), palette_name)
print(palette)
# p <- lapply(seq_along(args), function(i) {
#   df <- args[[i]]
#   modelname <- modelnames[i]
#
#   for (j in seq_along(vpcnames)) {
#     vpc <- vpcnames[j]
#     true <- true_params[[vpc]]
#     bias <- true_params[[vpc]] - df[[vpc]]
#
#     plot(true, bias, ylim = c(-1, 1),
#          xlab = paste("True", vpc), ylab = paste("Bias ", vpc),
#          main = paste("Model:", modelname),
#          col = colors[j], pch = 19)
#   }
# })
}
percomPlot(true,nbnb,nbcp,nbvst)
percomPlot <- function(true_params, palette_name = "Set1",...) {
args <- list(...)
print(palette_name)
# Capture the names of the arguments passed via ...
modelnames <- sapply(substitute(list(...))[-1], deparse)
vpcnames <- names(true_params)[grep("vpc", names(true_params))]
estvpcnames <- unique(unlist(lapply(args, function(df) {
grep("vpc", names(df), value = TRUE)})))
missing_vpcs <- setdiff(vpcnames, estvpcnames)
if(length(missing_vpcs) > 0) {
stop("The following vpc columns are not common: ",
paste(missing_vpcs, collapse = ", "))
}
nrows <- length(args)
ncols <- length(vpcnames)
par(mfrow = c(nrows, ncols))
colors <- RColorBrewer::brewer.pal(max(ncols, 3), palette_name)
# p <- lapply(seq_along(args), function(i) {
#   df <- args[[i]]
#   modelname <- modelnames[i]
#
#   for (j in seq_along(vpcnames)) {
#     vpc <- vpcnames[j]
#     true <- true_params[[vpc]]
#     bias <- true_params[[vpc]] - df[[vpc]]
#
#     plot(true, bias, ylim = c(-1, 1),
#          xlab = paste("True", vpc), ylab = paste("Bias ", vpc),
#          main = paste("Model:", modelname),
#          col = colors[j], pch = 19)
#   }
# })
}
percomPlot(true,nbnb,nbcp,nbvst)
percomPlot <- function(true_params, palette_name = "Set1", ...) {
args <- list(...)
print(palette_name)
# Capture the names of the arguments passed via ...
modelnames <- sapply(substitute(list(...))[-1], deparse)
vpcnames <- names(true_params)[grep("vpc", names(true_params))]
estvpcnames <- unique(unlist(lapply(args, function(df) {
grep("vpc", names(df), value = TRUE)})))
missing_vpcs <- setdiff(vpcnames, estvpcnames)
if(length(missing_vpcs) > 0) {
stop("The following vpc columns are not common: ",
paste(missing_vpcs, collapse = ", "))
}
nrows <- length(args)
ncols <- length(vpcnames)
par(mfrow = c(nrows, ncols))
colors <- RColorBrewer::brewer.pal(max(ncols, 3), palette_name)
# p <- lapply(seq_along(args), function(i) {
#   df <- args[[i]]
#   modelname <- modelnames[i]
#
#   for (j in seq_along(vpcnames)) {
#     vpc <- vpcnames[j]
#     true <- true_params[[vpc]]
#     bias <- true_params[[vpc]] - df[[vpc]]
#
#     plot(true, bias, ylim = c(-1, 1),
#          xlab = paste("True", vpc), ylab = paste("Bias ", vpc),
#          main = paste("Model:", modelname),
#          col = colors[j], pch = 19)
#   }
# })
}
percomPlot(true,nbnb,nbcp,nbvst)
percomPlot <- function(true_params, ... , palette_name = "Set1") {
args <- list(...)
print(palette_name)
# Capture the names of the arguments passed via ...
modelnames <- sapply(substitute(list(...))[-1], deparse)
vpcnames <- names(true_params)[grep("vpc", names(true_params))]
estvpcnames <- unique(unlist(lapply(args, function(df) {
grep("vpc", names(df), value = TRUE)})))
missing_vpcs <- setdiff(vpcnames, estvpcnames)
if(length(missing_vpcs) > 0) {
stop("The following vpc columns are not common: ",
paste(missing_vpcs, collapse = ", "))
}
nrows <- length(args)
ncols <- length(vpcnames)
par(mfrow = c(nrows, ncols))
colors <- RColorBrewer::brewer.pal(max(ncols, 3), palette_name)
# p <- lapply(seq_along(args), function(i) {
#   df <- args[[i]]
#   modelname <- modelnames[i]
#
#   for (j in seq_along(vpcnames)) {
#     vpc <- vpcnames[j]
#     true <- true_params[[vpc]]
#     bias <- true_params[[vpc]] - df[[vpc]]
#
#     plot(true, bias, ylim = c(-1, 1),
#          xlab = paste("True", vpc), ylab = paste("Bias ", vpc),
#          main = paste("Model:", modelname),
#          col = colors[j], pch = 19)
#   }
# })
}
percomPlot(true,nbnb,nbcp,nbvst)
percomPlot <- function(true_params, ... , palette_name = "Set1") {
args <- list(...)
# Capture the names of the arguments passed via ...
modelnames <- sapply(substitute(list(...))[-1], deparse)
vpcnames <- names(true_params)[grep("vpc", names(true_params))]
estvpcnames <- unique(unlist(lapply(args, function(df) {
grep("vpc", names(df), value = TRUE)})))
missing_vpcs <- setdiff(vpcnames, estvpcnames)
if(length(missing_vpcs) > 0) {
stop("The following vpc columns are not common: ",
paste(missing_vpcs, collapse = ", "))
}
nrows <- length(args)
ncols <- length(vpcnames)
par(mfrow = c(nrows, ncols))
colors <- RColorBrewer::brewer.pal(max(ncols, 3), palette_name)
p <- lapply(seq_along(args), function(i) {
df <- args[[i]]
modelname <- modelnames[i]
for (j in seq_along(vpcnames)) {
vpc <- vpcnames[j]
true <- true_params[[vpc]]
bias <- true_params[[vpc]] - df[[vpc]]
plot(true, bias, ylim = c(-1, 1),
xlab = paste("True", vpc), ylab = paste("Bias ", vpc),
main = paste("Model:", modelname),
col = colors[j], pch = 19)
}
})
}
percomPlot(true,nbnb,nbcp,nbvst)
percomPlot(true,nbnb,nbcp,nbvst, palette_name = "Dark")
percomPlot(true,nbnb,nbcp,nbvst, palette_name = "Dark2")
percomPlot(true,nbnb,nbcp,nbvst, palette_name = "Dark1")
percomPlot(true,nbnb,nbcp,nbvst, palette_name = "Paired")
check()
check()
check()
use_package("RColorBrewer")
check()
load_all()
rm(list = c("percomPlot"))
load_all()
check()
document()
check()
check()
check()
devtools::install_github("juliusolaifa/vpc")
check()
check()
install()
load_all()
source("C:/Users/JuliusOlaifa/Desktop/SimulationStudyVPC/inst/main.R")
remove.packages("vpc")
source("C:/Users/JuliusOlaifa/Desktop/SimulationStudyVPC/inst/main.R")
load_all()
check()
vpc
library(vpc)
check()
check()
library(vpc)
remove.packages("vpc")
library(vpc)
remove.packages(vpc)
remove.packages("vpc")
remove.packages(vpc)
library(vpc)
remove.packages(vpc)
remove.packages("vpc")
library(vpc)
check()
install()
library(vpc)
remove.packages(vpc)
remove.packages("vpc")
library(vpc)
check()
check()
document()
remotes::install_github("juliusolaifa/vpc")
remove.packages("vpc")
library(vpc)
remotes::install_github("juliusolaifa/vpc")
check()
document()
check()
check()
?paramgridWithVPC
?compareGLMMFit
?percomPlot
check()
use_package("stats")
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
remotes::install_github("juliusolaifa/vpc", upgrade = "never",
force=TRUE)
check
check()
?vpc::generateRandomInterceptMatrix
library(vpc)
?vpc::generateRandomInterceptMatrix
remove.packages("vpc")
remove.packages("vpc")
check()
remotes::install_github("juliusolaifa/vpc", upgrade = "never",
force=TRUE)
remove.packages("vpc")
remotes::install_github("juliusolaifa/vpc", upgrade = "never",
force=TRUE)
remotes::install_github("juliusolaifa/vpc", upgrade = "never",
force=TRUE)
?vpc::generateRandomInterceptMatrix
library(vpc)
?vpc::generateRandomInterceptMatrix
vpc::generateRandomInterceptMatrix
?vpc::generateRandomDesignMatrices
remotes::install_github("juliusolaifa/vpc", upgrade = "never",
force=TRUE)
remove.packages("vpc")
remotes::install_github("juliusolaifa/vpc", upgrade = "never",
force=TRUE)
remotes::install_github("juliusolaifa/vpc", upgrade = "never",
force=TRUE)
library(vpc)
?vpc::generateRandomDesignMatrices
?vpc::generateRandomInterceptMatrix
remove.packages("vpc")
remove.packages("vpc")
remove.packages("vpc")
remotes::install_github("juliusolaifa/vpc", upgrade = "never",
force=TRUE)
?vpc::generateRandomInterceptMatrix
?vpc::generateRandomDesignMatrices
remove.packages("vpc")
install.packages("vpc")
install.packages("vpc")
install.packages("glmmVpc")
remotes::install_github("juliusolaifa/glmmVpc", upgrade = "never",
force=TRUE)
remove.packages("vpc")
remove.packages("vpc")
remove.packages("glmmVpc")
remotes::install_github("juliusolaifa/glmmVpc", upgrade = "never",
force=TRUE)
remotes::install_github("juliusolaifa/glmmVpc", upgrade = "never",
force=TRUE)
remove.packages("glmmVpc")
remove.packages("glmmVpc")
remotes::install_github("juliusolaifa/glmmVpc", upgrade = "never",
force=TRUE)
formals(glmmVpc::batchGLMMDataUsingMatrix)
b0=c(3,5);
b1=c(5,7);
sigmas=list(
sig1 = c(2,1,2)#,
# sig2 = c(2,-1,2),
# sig3 = c(2,0,2),
# sig4 = c(2,1,4),
# sig5 = c(2,-1,4),
# sig6 = c(2,0,4)
);
phis=c(seq(0.01,0.4,0.02))
sig11=2
sig12=1
sig22=2
expand.grid(b0=b0,b1=b1,sig11=sig11,sig12=sig12,sig22=sig22,phi=phis)
params <- expand.grid(b0=b0,b1=b1,sig11=sig11,sig12=sig12,sig22=sig22,phi=phis)
batchGLMMDataUsingMatrixa(paramMat=params,
ns=(5,3,2), X=1:10,
batchGLMMDataUsingMatrixa(paramMat=params,
ns=c(5,3,2), X=1:10,
family = "negative_binomial",
link="log", iter = 1,
parallel = TRUE)
batchGLMMDataUsingMatrix(paramMat=params,
ns=c(5,3,2), X=1:10,
family = "negative_binomial",
link="log", iter = 1,
parallel = TRUE)
batchGLMMDataUsingMatrixa(paramMat=params,
ns=ns, X=X,
family = gen_family,
link=link, iter = iter,
parallel = TRUE)
batchGLMMDataUsingMatrix(paramMat=params,
ns=c(5,3,2), X=1:10,
family = "negative_binomial",
link="log", iter = 1,
parallel = TRUE)
glmmVpc::batchGLMMDataUsingMatrix(paramMat=params,
ns=c(5,3,2), X=1:10,
family = "negative_binomial",
link="log", iter = 1,
parallel = TRUE)
names(params$phi) <- "theta"
glmmVpc::batchGLMMDataUsingMatrix(paramMat=params,
ns=c(5,3,2), X=1:10,
family = "negative_binomial",
link="log", iter = 1,
parallel = TRUE)
params
colnames(params$phi) <- "theta"
params <- expand.grid(b0=b0,b1=b1,sig11=sig11,sig12=sig12,sig22=sig22,theta=phis)
glmmVpc::batchGLMMDataUsingMatrix(paramMat=params,
ns=c(5,3,2), X=1:10,
family = "negative_binomial",
link="log", iter = 1,
parallel = TRUE)
glmmVpc::batchGLMMDataUsingMatrix(paramMat=params,
ns=c(5,3,2), X=1:10,
family = "negative_binomial",
link="log", iter = 1,
parallel = TRUE)
glmmVpc::batchGLMMDataUsingMatrix(paramMat=params,
ns=c(5,3,2), X=matrix(1:20,ncol = 2),
family = "negative_binomial",
link="log", iter = 1,
parallel = TRUE)
warnings()
matrix(1:20,ncol = 2)
glmmVpc::batchGLMMDataUsingMatrix(paramMat=params,
ns=c(5,3,2), X=matrix(1:20,ncol = 2),
family = "negative_binomial",
link="log", iter = 1,
parallel = TRUE)
warnings()
glmmVpc::batchGLMMDataUsingMatrix(paramMat=params,
ns=c(5,3,2), X=1:10,
family = "negative_binomial",
link="log", iter = 1,
parallel = TRUE)
head(glmmVpc::batchGLMMDataUsingMatrix(paramMat=params,
ns=c(5,3,2), X=1:10,
family = "negative_binomial",
link="log", iter = 1,
parallel = TRUE))
dat <- head(glmmVpc::batchGLMMDataUsingMatrix(paramMat=params,
ns=c(5,3,2), X=1:10,
family = "negative_binomial",
link="log", iter = 1,
parallel = TRUE))
glmmVpc::as_dataframe
dat <- head(glmmVpc::batchGLMMDataUsingMatrix(paramMat=params,
ns=c(5,3,2), X=1:10,
family = "negative_binomial",
link="log", iter = 1,
parallel = TRUE))
head
dat <- head(glmmVpc::batchGLMMDataUsingMatrix(paramMat=params,
ns=c(5,3,2), X=1:10,
family = "negative_binomial",
link="log", iter = 1,
parallel = TRUE))
dat
remove.packages("glmmVpc")
remove.packages("glmmVpc")
get_y(dat)
remove.packages("glmmVpc")
remove.packages("glmmVpc")
remotes::install_github("juliusolaifa/glmmVpc", upgrade = "never",
force=TRUE)
check()
check()
check()
check()
check()
check()
check()
check()
check()
generatecompareEstimation(glmmVpc::paramNBmat, ns=c(5,3,2), gen_family = "negative_binomial", another_family = "tweedie", gen_link = "log", fit_formula = Feature ~ X + (X|cluster), X=vpc::rgen01(c(5,3,2)))
generatecompareEstimation(glmmVpc::paramNBmat, ns=c(5,3,2), gen_family = "negative_binomial", another_family = "tweedie", gen_link = "log", fit_formula = Feature ~ X + (X|cluster), X=glmmVpc::rgen01(c(5,3,2)))
glmmVpc::batchGLMMDataUsingMatrix(glmmVpc::paramNBmat, ns=c(5,3,2), family = "negative_binomial", gen_link = "log", X=glmmVpc::rgen01(c(5,3,2)))
glmmVpc::batchGLMMDataUsingMatrix(glmmVpc::paramNBmat, ns=c(5,3,2), family = "negative_binomial", link = "log", X=glmmVpc::rgen01(c(5,3,2)))
?glmmVpc::batchGLMMFit
dat <- glmmVpc::batchGLMMDataUsingMatrix(glmmVpc::paramNBmat, ns=c(5,3,2), family = "negative_binomial", link = "log", X=glmmVpc::rgen01(c(5,3,2)))
dat[1]
glmmVpc::batchGLMMFit(Feature~X+(X|cluster))
glmmVpc::batchGLMMFit(Feature~X+(X|cluster), dat, family="negative_binomial")
warnings()
fit <- glmmVpc::batchGLMMFit(Feature~X+(X|cluster), dat, family="negative_binomial")
glmmVpc::vpc(fit, 0)
dat <- glmmVpc::batchGLMMDataUsingMatrix(glmmVpc::paramNBmat, ns=c(5,3,2), family = "negative_binomial", link = "log", X=glmmVpc::rgen01(c(5,3,2)), vpc_input_values=c(0,1))
generatecompareEstimation(glmmVpc::paramNBmat, ns=c(5,3,2), gen_family = "negative_binomial", another_family = "tweedie", gen_link = "log", fit_formula = Feature ~ X + (X|cluster), X=glmmVpc::rgen01(c(5,3,2)), vpc_input_values=c(0,1))
?sapply
check()
generatecompareEstimation(glmmVpc::paramNBmat, ns=c(5,3,2), gen_family = "negative_binomial", another_family = "tweedie", gen_link = "log", fit_formula = Feature ~ X + (X|cluster), X=glmmVpc::rgen01(c(5,3,2)), vpc_input_values=c(0,1))
fit
sapply(fit, glmmVpc::vpc, x=0)
sapply(fit, glmmVpc::vpc, x=c(0,1))
lapply(fit, glmmVpc::vpc, x=c(0,1))
check()
generatecompareEstimation(glmmVpc::paramNBmat, ns=c(5,3,2), gen_family = "negative_binomial", another_family = "tweedie", gen_link = "log", fit_formula = Feature ~ X + (X|cluster), X=glmmVpc::rgen01(c(5,3,2)), vpc_input_values=c(0,1))
tes()
test()
devtools::test()
